from urllib.parse import quote_plus
import os
from get_aad_token.util import get_rand_hex

# DO NOT CHANGE. NEEDS TO BE AT TOP OF MODULE.
if not 'FLASK_PASS' in os.environ.keys():
    reg_info = dict()
    reg_info['secret'] = input('please enter your application password.')
########################################################################################################################
## FLASK ADMIN KEY: ####################################################################################################
# <CHANGE ME>
# Arbitrary flask encryption seed. Pick something complicated.
SECRET_KEY = '1b1808b7-4417-47b0-9db0-1395f978b088'

########################################################################################################################
## FLASK SSL CERTS: ####################################################################################################
# <CHANGE ME>
# required for end-to-end encryption. DO NOT USE THIS PACKAGE WITHOUT EITHER OF THESE.
CERT_PEM_ABS_PATH = os.path.realpath('./cert.pem')
KEY_PEM_ABS_PATH = os.path.realpath('./key.pem')

########################################################################################################################
## AAD CONFIG: #########################################################################################################
reg_info = {
    # <CHANGE ME>
    "tenant": "MYCOMPANY.onmicrosoft.com",

    # <CHANGE ME>
    # Aka Application ID. Generated by the Azure Portal during app registration.
    "client_id": "11112222-aaaa-bbbb-cccc-ddddeeeeffff",

    # <CHANGE ME OR CHANGE AZURE PORTAL>
    # Needs to be https & match the redircet uril specified during app registratino at portal.azure.com. Tells the authority_host where to send the token.
    "redirect_uri": quote_plus("https://localhost:5000/getAToken"),
    "redirect_uri_plaintext": "https://localhost:5000/getAToken",

    # <CHANGE ME>
    # "scope" is used by v2.0 of the Graph API. Needs to match to permissions you gave your app when registering with AAD.
    # It is *not* required by v1.0. This example scope lays out read/write access for Sharepoint and read-access for user info.
    "scope" : quote_plus("https://graph.microsoft.com/Files.Read.All https://graph.microsoft.com/Sites.Read.All https://graph.microsoft.com/User.Read https://graph.microsoft.com/openid"),
    "scope_plaintext": "https://graph.microsoft.com/Files.Read.All https://graph.microsoft.com/Sites.Read.All https://graph.microsoft.com/User.Read https://graph.microsoft.com/openid",

    # "resource" is v1.0 of the API
    "resource": quote_plus("https://graph.microsoft.com"),
    "resource_plaintext": "https://graph.microsoft.com",


    # this should not change
    "authority_host_url": "https://login.microsoftonline.com",

    # Essentially a session-id.
    "state": get_rand_hex(30),
}

########################################################################################################################
## FINAL CHECKS: #######################################################################################################
# Everything will break if secret is not specified. Checks if the register already has a secret value assigned.
if 'secret' not in reg_info.keys():
    reg_info['secret'] = os.environ['FLASK_PASS']


